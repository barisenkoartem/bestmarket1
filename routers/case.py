from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text, Command, StateFilter, CommandObject
from aiogram.dispatcher.fsm.context import FSMContext

import random

from models import User, Global
from tools.send import send_message_to_admins
from keyboards import cases_keyboard, start_case, experienced_case, god_case, major_case, gold_case

router = Router()


@router.message(Text(text=["–ö–µ–π—Å—ã üì¶"]))
async def cases_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=cases_keyboard())
    
    
@router.callback_query(Text(text="ref_case"))
async def ref_case_handler(call: CallbackQuery, user: User):
    if user.count_invited < 7:
        await call.message.delete()
        await call.message.answer(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞ 7 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –£ –≤–∞—Å –∏—Ö {user.count_invited}.")
    else:
        bonus = random.randint(1,3)
        user.count_invited -= 7
        user.gold += bonus
        await user.save()
        await call.message.delete()
        await call.message.answer(f"–í–∞–º –≤—ã–ø–∞–ª–æ {bonus} –∑–æ–ª–æ—Ç–∞.")
        
        
@router.callback_query(Text(text="start_case"))
async def start_case_handler(call: CallbackQuery, user: User):
    await call.message.delete()
    await call.message.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ù–∞—á–∞–ª–æ:\n\n"
    "ST Desert Eagle ‚ÄòRed Dragon‚Äô - 20G\n"
    "ST FAMAS ‚ÄòBeagle‚Äô - 30G\n"
    "ST AKR12 ‚ÄòFlow‚Äô - 28G\n"
    "ST AKR12 ‚ÄòTransistor‚Äô 29 - 29G\n"
    "P90 ‚ÄòGhoul‚Äô - 30G\n"
    "P350 ‚ÄòNeon‚Äô - 35G\n"
    "AKR12 ‚Äò4 Years‚Äô - 42G\n"
    "Sticker ‚Äò4 Years Color‚Äô - 62G\n"
    "MP7 ‚ÄòGraffity‚Äô - 30G", reply_markup=start_case())
    
    
@router.callback_query(Text(text="start_open"))
async def start_open_handler(call: CallbackQuery, user: User, bot: Bot):
    if user.rubles < 25:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        
        bonus = random.choice([{"name": "ST Desert Eagle ‚ÄòRed Dragon‚Äô", "price": 20}, {"name": "ST FAMAS ‚ÄòBeagle‚Äô", "price": 30}, {"name": "ST AKR12 ‚ÄòFlow‚Äô", "price": 28}, {"name": "ST AKR12 ‚ÄòTransistor‚Äô", "price": 29}, {"name": "P90 ‚ÄòGhoul‚Äô", "price": 30}, {"name": "P350 ‚ÄòNeon‚Äô", "price": 35}, {"name": "AKR12 ‚Äò4 Years‚Äô", "price": 42}, {"name": "Sticker ‚Äò4 Years Color‚Äô", "price": 62}, {"name": "MP7 ‚ÄòGraffity‚Äô", "price": 30}])
        user.rubles -= 25
        user.gold += bonus["price"]
        await user.save()
        await call.message.delete()
        await call.message.answer(f"–ò–∑ –∫–µ–π—Å–∞ ¬´–ù–∞—á–∞–ª–æ¬ª –≤–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç {bonus['name']} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {bonus['price']}G. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        await send_message_to_admins(bot, text=f"@{user.nickname} ({user.user_id}) –≤—ã–±–∏–ª –∏–∑ –∫–µ–π—Å–∞ ¬´–Ω–∞—á–∞–ª–æ¬ª {bonus['name']} –∑–∞ {bonus['price']}G")
        
        
@router.callback_query(Text(text="experienced_case"))
async def experienced_case_handler(call: CallbackQuery, user: User):
    await call.message.delete()
    await call.message.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –û–ø—ã—Ç–Ω—ã–π:\n\n"
    "UMP45 ‚ÄòCyberpunk‚Äô - 37G\n"
    "Charm ‚ÄòKatana‚Äô - 44G\n"
    "Chibi ‚ÄòCrunch‚Äô - 55G\n"
    "ST  FabM ‚ÄòParrot‚Äô - 63G\n"
    "MP7 ‚ÄòWinter Sport‚Äô - 60G\n"
    "ST AWM ‚ÄòPolar Night - 71G\n"
    "MP7 ‚Äò2 Years‚Äô - 67G\n"
    "AKR ‚ÄòNecromancer‚Äô - 83G\n"
    "P350 ‚ÄòForest Spirit‚Äô - 112G", reply_markup=experienced_case())
    
    
@router.callback_query(Text(text="experienced_open"))
async def experienced_open_handler(call: CallbackQuery, user: User, bot: Bot):
    if user.rubles < 50:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        
        bonus = random.choice([{"name": "UMP45 ‚ÄòCyberpunk‚Äô", "price": 37}, {"name": "Charm ‚ÄòKatana‚Äô", "price": 44}, {"name": "Chibi ‚ÄòCrunch‚Äô", "price": 55}, {"name": "ST  FabM ‚ÄòParrot‚Äô", "price": 63}, {"name": "MP7 ‚ÄòWinter Sport‚Äô", "price": 60}, {"name": "ST AWM ‚ÄòPolar Night'", "price": 71}, {"name": "MP7 ‚Äò2 Years‚Äô", "price": 67}, {"name": "AKR ‚ÄòNecromancer‚Äô", "price": 83}, {"name": "P350 ‚ÄòForest Spirit‚Äô", "price": 112}])
        user.rubles -= 50
        user.gold += bonus["price"]
        await user.save()
        await call.message.delete()
        await call.message.answer(f"–ò–∑ –∫–µ–π—Å–∞ ¬´–û–ø—ã—Ç–Ω—ã–π¬ª –≤–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç {bonus['name']} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {bonus['price']}G. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        await send_message_to_admins(bot, text=f"@{user.nickname} ({user.user_id}) –≤—ã–±–∏–ª –∏–∑ –∫–µ–π—Å–∞ ¬´–û–ø—ã—Ç–Ω—ã–π¬ª {bonus['name']} –∑–∞ {bonus['price']}G")
        
        
@router.callback_query(Text(text="god_case"))
async def god_case_handler(call: CallbackQuery, user: User):
    await call.message.delete()
    await call.message.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ë–æ–≥:\n\n"
    "ST AKR ‚ÄòNano‚Äô - 87G\n"
    "G22 ‚ÄòMonster‚Äô - 99G\n"
    "P90 ‚ÄòSamurai‚Äô - 121G\n"
    "Charm ‚ÄòSale‚Äô - 140G\n"
    "ST F/S ‚ÄòRush‚Äô - 157G\n"
    "Case ‚ÄòRival‚Äô - 170G\n"
    "ST AKR ‚ÄòCarbon‚Äô - 118G\n"
    "M40 ‚ÄòWinter Track‚Äô - 145G\n"
    "Charm ‚ÄòCone‚Äô - 200G", reply_markup=god_case())
    
    
@router.callback_query(Text(text="god_open"))
async def god_open_handler(call: CallbackQuery, user: User, bot: Bot):
    if user.rubles < 100:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        
        bonus = random.choice([{"name": "ST AKR ‚ÄòNano‚Äô", "price": 87}, {"name": "G22 ‚ÄòMonster‚Äô", "price": 99}, {"name": "P90 ‚ÄòSamurai‚Äô", "price": 121}, {"name": "Charm ‚ÄòSale‚Äô", "price": 140}, {"name": "ST F/S ‚ÄòRush‚Äô", "price": 157}, {"name": "Case ‚ÄòRival‚Äô", "price": 170}, {"name": "ST AKR ‚ÄòCarbon‚Äô", "price": 118}, {"name": "M40 ‚ÄòWinter Track‚Äô", "price": 145}, {"name": "Charm ‚ÄòCone‚Äô", "price": 200}])
        user.rubles -= 100
        user.gold += bonus["price"]
        await user.save()
        await call.message.delete()
        await call.message.answer(f"–ò–∑ –∫–µ–π—Å–∞ ¬´–ë–æ–≥¬ª –≤–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç {bonus['name']} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {bonus['price']}G. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        await send_message_to_admins(bot, text=f"@{user.nickname} ({user.user_id}) –≤—ã–±–∏–ª –∏–∑ –∫–µ–π—Å–∞ ¬´–ë–æ–≥¬ª {bonus['name']} –∑–∞ {bonus['price']}G")
        
        
@router.callback_query(Text(text="major_case"))
async def major_case_handler(call: CallbackQuery, user: User):
    await call.message.delete()
    await call.message.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ú–∞–∂–æ—Ä:\n\n"
    "P350 ‚ÄòRadiation‚Äô - 444G\n"
    "MP7 ‚ÄòBlizzard‚Äô - 500G\n"
    "Charm ‚ÄòZen‚Äô - 620G\n"
    "ST AKR12 ‚ÄòGeometric‚Äô - 650G\n"
    "AWM ‚ÄòSport‚Äô - 697G\n"
    "ST P90 ‚ÄòSamurai‚Äô - 710G\n"
    "FAMAS ‚ÄòMonster‚Äô - 774G\n"
    "M4 ‚ÄòSamurai‚Äô - 801G\n"
    "Flip ‚ÄòSnow Camo‚Äô - 1020G", reply_markup=major_case())
    
    
@router.callback_query(Text(text="major_open"))
async def major_open_handler(call: CallbackQuery, user: User, bot: Bot):
    if user.rubles < 555:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        
        bonus = random.choice([{"name": "P350 ‚ÄòRadiation‚Äô", "price": 444}, {"name": "MP7 ‚ÄòBlizzard‚Äô", "price": 500}, {"name": "Charm ‚ÄòZen‚Äô", "price": 620}, {"name": "ST AKR12 ‚ÄòGeometric‚Äô", "price": 650}, {"name": "AWM ‚ÄòSport‚Äô", "price": 697}, {"name": "ST P90 ‚ÄòSamurai‚Äô", "price": 710}, {"name": "FAMAS ‚ÄòMonster‚Äô", "price": 774}, {"name": "M4 ‚ÄòSamurai‚Äô", "price": 801}, {"name": "Flip ‚ÄòSnow Camo‚Äô", "price": 1020}])
        user.rubles -= 555
        user.gold += bonus["price"]
        await user.save()
        await call.message.delete()
        await call.message.answer(f"–ò–∑ –∫–µ–π—Å–∞ ¬´–ú–∞–∂–æ—Ä¬ª –≤–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç {bonus['name']} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {bonus['price']}G. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        await send_message_to_admins(bot, text=f"@{user.nickname} ({user.user_id}) –≤—ã–±–∏–ª –∏–∑ –∫–µ–π—Å–∞ ¬´–ú–∞–∂–æ—Ä¬ª {bonus['name']} –∑–∞ {bonus['price']}G")
        
        
@router.callback_query(Text(text="gold_case"))
async def gold_case_handler(call: CallbackQuery, user: User):
    await call.message.delete()
    await call.message.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞ –ó–æ–ª–æ—Ç–æ–π:\n\n"
    "FN FAL ‚ÄòPhoenix Rise‚Äô - 860G\n"
    "Deser Eagle ‚ÄòYakuzƒÖ‚Äô - 867G\n"
    "USP ‚ÄòGeometric‚Äô - 904G\n"
    "ST FAMAS ‚ÄòFury‚Äô - 950G\n"
    "Scorpion ‚ÄòSea Yes‚Äô - 1000G\n"
    "Flip ‚ÄòFrozen‚Äô - 1123G\n"
    "Kunai ‚ÄòCold Flame‚Äô - 1250G\n"
    "Flip ‚ÄòVortex‚Äô - 1297G\n"
    "Knife Tanto ‚ÄòDojo‚Äô - 1600G", reply_markup=gold_case())
    
    
@router.callback_query(Text(text="gold_open"))
async def gold_open_handler(call: CallbackQuery, user: User, bot: Bot):
    if user.rubles < 777:
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        
        bonus = random.choice([{"name": "FN FAL ‚ÄòPhoenix Rise‚Äô", "price": 860}, {"name": "Deser Eagle ‚ÄòYakuzƒÖ‚Äô", "price": 867}, {"name": "USP ‚ÄòGeometric‚Äô", "price": 904}, {"name": "ST FAMAS ‚ÄòFury‚Äô", "price": 950}, {"name": "Scorpion ‚ÄòSea Yes‚Äô", "price": 1000}, {"name": "Flip ‚ÄòFrozen‚Äô", "price": 1123}, {"name": "Kunai ‚ÄòCold Flame‚Äô", "price": 1250}, {"name": "Flip ‚ÄòVortex‚Äô", "price": 1297}, {"name": "Knife Tanto ‚ÄòDojo‚Äô", "price": 1600}])
        user.rubles -= 777
        user.gold += bonus["price"]
        await user.save()
        await call.message.delete()
        await call.message.answer(f"–ò–∑ –∫–µ–π—Å–∞ ¬´–ó–æ–ª–æ—Ç–æ–π¬ª –≤–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç {bonus['name']} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {bonus['price']}G. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        await send_message_to_admins(bot, text=f"@{user.nickname} ({user.user_id}) –≤—ã–±–∏–ª –∏–∑ –∫–µ–π—Å–∞ ¬´–ó–æ–ª–æ—Ç–æ–π¬ª {bonus['name']} –∑–∞ {bonus['price']}G")
        
        
@router.callback_query(Text(text="back_cases"))
async def back_cases_handler(call: CallbackQuery):
    await call.message.delete()
    await cases_handler(call.message)
        