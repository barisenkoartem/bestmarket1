from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.fsm.context import FSMContext
import re
import datetime

from config import SUPPORT_LINK
from keyboards import support_keyboard, support_back_keyboard, return_to_menu_keyboard, support_admin_keyboard
from states import SupportState
from tools.send import send_message_to_admins
from models import Question
from routers.menu import menu_handler

router = Router()


questions = (
    f"1. –ü–æ—á–µ–º—É —è –ø–æ–ø–æ–ª–Ω—è—é –≤ –≥—Ä–∏–≤–Ω–∞—Ö, –∞ –º–Ω–µ –ø—Ä–∏—à–ª–æ –º–µ–Ω—å—à–µ —Ä—É–±–ª–µ–π, —á–µ–º –ø–∏—à–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?\n"
    "2. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?\n"
    "3. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —á–µ–∫?\n"
    "4. –ü–æ—á–µ–º—É –º–Ω–µ –Ω–µ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏?\n"
    "5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å?\n"
    "6. –ú–æ–∂–Ω–æ –ª–∏ –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ/–∫–ª–∞–Ω—ã/–∞–∫–∫–∞—É–Ω—Ç/—Å–∫–∏–Ω—ã?\n"
    "7. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?\n\n"
    "–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∞—Ç—å—Å—è")


@router.message(Text(text=["–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë§"]))
async def support_handler(message: Message):
	await message.answer(questions, reply_markup=support_keyboard())
	    
	    
@router.callback_query(Text(text="question_1"))
async def question_first(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–ú—ã –Ω–µ —è–≤–ª—è–µ–º—Å—è –±–∏—Ä–∂–µ–π –≤–∞–ª—é—Ç, –≤—ã —É –Ω–∞—Å –ø–æ–∫—É–ø–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ, –∞ –Ω–µ —Ä—É–±–ª–∏. –¢–æ –µ—Å—Ç—å, –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–∞—à–∏ –≥—Ä–∏–≤–Ω—ã –≤ –∑–æ–ª–æ—Ç–æ. –ü–æ—Å–ª–µ, –∑–æ–ª–æ—Ç–æ –≤ —Ä—É–±–ª–∏.", reply_markup=support_back_keyboard())
    
    
@router.callback_query(Text(text="question_2"))
async def question_second(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ 24 —á–∞—Å–æ–≤ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥. –ù–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≤—ã–≤–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ –¥–æ —á–∞—Å–∞.", reply_markup=support_back_keyboard())
    
    
@router.callback_query(Text(text="question_3"))
async def question_third(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–ß–µ–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ —Ä—É—á–Ω—É—é, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, —Ç–æ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.", reply_markup=support_back_keyboard())
    
    
@router.callback_query(Text(text="question_4"))
async def question_fourth(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer('–ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ —á–µ—Ä–µ–∑ QIWI, —Ç–æ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–¥–µ –≤–∞–º –≤—ã–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É, –∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –Ω–∞–∂–º–∏—Ç–µ –µ—ë. –ù–æ –µ—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Ç–æ –≤—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∏–Ω—É–ª–∏ –±–æ—Ç—É —á–µ–∫ —Ñ–∞–π–ª–æ–º. –í –ø–æ–¥–æ–±–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–∂–º–∏—Ç–µ: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É,  –ø–æ—Å–ª–µ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º". –ü–æ—Å–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.', reply_markup=support_back_keyboard())
    
    
@router.callback_query(Text(text="question_5"))
async def question_fifth(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í–µ—Å—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –±–æ—Ç–µ, –ø–æ–ª—É—á–µ–Ω —á–µ—Å—Ç–Ω—ã–º –ø—É—Ç—ë–º. –ï—Å–ª–∏ –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–æ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å –≤ –∏–≥—Ä–µ.", reply_markup=support_back_keyboard())
    
    
@router.callback_query(Text(text="question_6"))
async def question_sixth(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–ú—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫, –Ω–µ –∑–Ω–∞–µ–º, –æ—Ç–∫—É–¥–∞ –æ–Ω–∏ –∏—Ö –¥–æ—Å—Ç–∞–ª–∏, –∞ –µ—Å–ª–∏ –∑–Ω–∞–µ–º, —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ –¥–ª—è –Ω–∞—Å, –∏ –º—ã –ø—Ä–æ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–≤–µ—Ä–µ–Ω–Ω—ã –Ω–∞ 100%", reply_markup=support_back_keyboard())
    
    
@router.callback_query(Text(text="question_7"))
async def question_seventh(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –ù–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–º –∑–æ–ª–æ—Ç–æ. –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å, –∏ –ø–æ–∫–∞ –æ–Ω–∞ –¥–æ–π–¥—ë—Ç –¥–æ –≤–∞—Å, –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–æ –µ—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª —á–∞—Å–∞ –∫–∞–∫ –Ω–∞ 1 –º–µ—Å—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä—ã–Ω–∫–æ–º ( —Å–ª–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–∫–∏–Ω) –∏–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤–∑—è–ª –ø–µ—Ä–µ—Ä—ã–≤.", reply_markup=support_back_keyboard())
    
    
@router.callback_query(Text(text="back_support"))
async def back_support_handler(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer(questions, reply_markup=support_keyboard())
    
    
@router.callback_query(Text(text="inquire"))
async def inquire_handler(call: CallbackQuery, state: FSMContext):
    question = await Question.get_or_none(user_id=call.from_user.id, status=0)
    await call.message.delete()
    if not question:
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", reply_markup=return_to_menu_keyboard())
        await state.set_state(SupportState.QUESTION)
    else:
        await call.message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
    
    
@router.message(SupportState.QUESTION)
async def question_handler(message: Message, state: FSMContext, bot: Bot, user):
    question = await Question.create(user_id=message.from_user.id, question=message.text)
    await send_message_to_admins(bot, text=(
        f"Question ID: {question.id}\n"
        f"Chat ID: {question.user_id}\n"
        f"Nickname: @{user.nickname}\n"
        f"Question:\n{question.question}"), reply_markup=support_admin_keyboard())
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    await menu_handler(message, state)
    
    
@router.callback_query(Text(text="close_question"))
async def close_question_handler(call: CallbackQuery, bot: Bot):
    question_id = int(re.findall("[0-9]+", call.message.text)[0])
    question = await Question.get_or_none(id=question_id)
    if question.status == 1:
        await call.message.reply(
            f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {question.response_time}"
            f"–û—Ç–≤–µ—Ç:\n{question.response}"
            )
    elif question.status == 2:
        await call.message.reply(
            f"–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {question.response_time}"
            )
    else:
        dt = (datetime.datetime.now()).strftime("%d.%m.%Y ‚Ä¢ %H:%M:%S")
        question.response_time = dt
        question.status = 2
        question.adm_nickname = call.from_user.username
        await question.save()
        await bot.send_message(chat_id=question.user_id, text="–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.")
        await call.message.reply("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
        
        
@router.callback_query(Text(text="reply_question"))
async def reply_question_handler(call: CallbackQuery, state: FSMContext):
    question_id = int(re.findall("[0-9]+", call.message.text)[0])
    question = await Question.get_or_none(id=question_id)
    if question.status == 1:
        await call.message.reply(
            f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {question.response_time} \n"
            f"–û—Ç–≤–µ—Ç: {question.response}"
            )
    elif question.status == 2:
        await call.message.reply(
            f"–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {question.response_time}"
            )
    else:
        await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç.\n", reply_markup=return_to_menu_keyboard())
        await state.set_data({"question_id": question_id})
        await state.set_state(SupportState.REPLY)
    
    
@router.message(SupportState.REPLY, content_types="text")
async def reply_handler(message: Message, state: FSMContext, bot: Bot, user):
    state_data = await state.get_data()
    question_id = state_data["question_id"]
    question = await Question.get_or_none(id=question_id)
    if question.status == 1:
        await message.answer(
            f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {question.response_time}\n"
            f"–û—Ç–≤–µ—Ç: {question.response}"
            )
    elif question.status == 2:
        await message.answer(
            f"–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {question.response_time}"
            )
    else:
        dt = (datetime.datetime.now()).strftime("%d.%m.%Y ‚Ä¢ %H:%M:%S")
        question.response_time = dt
        question.adm_nickname = user.nickname
        question.status = 1
        question.response = message.text
        await question.save()
        await bot.send_message(chat_id=question.user_id, text=(
            "–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç.\n"
            f"–í–æ–ø—Ä–æ—Å: {question.question}\n"
            f"–û—Ç–≤–µ—Ç: {question.response}"))
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await menu_handler(message, state)
    
    
@router.callback_query(Text(text="check_question"))
async def check_question_handler(call: CallbackQuery, state: FSMContext):
    question_id = int(re.findall("[0-9]+", call.message.text)[0])
    question = await Question.get_or_none(id=question_id)
    if question.status == 1:
        await call.message.reply(
            f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {question.response_time} \n"
            f"–û—Ç–≤–µ—Ç: {question.response}"
            )
    elif question.status == 2:
        await call.message.reply(
            f"–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–æ–º @{question.adm_nickname}.\n"
            f"–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {question.response_time}"
            )
    else:
        await call.message.reply("–í–æ–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")