from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text, Command, StateFilter
from aiogram.dispatcher.fsm.context import FSMContext

import os
import re

from loguru import logger

from models import Replenishment, User
from config import SECRET_QIWI_TOKEN, SBER, QIWI
from states import ReplenishState
from routers.menu import menu_handler
from tools.send import send_message_to_admins
from filters.admin import IsAdmin
from utils.qiwi import get_invoice, is_bill_paid
from keyboards import (
    return_to_menu_keyboard,
    replenish_keyboard, 
    check_bill_keyboard, 
    replenish_paid, 
    admin_replenish_keyboard, 
    happy, 
    not_happy)


router = Router()


@router.message(Text(text=["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥"], text_ignore_case=True))
async def replenish_handler(message: Message, state: FSMContext, bot: Bot):
    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö", reply_markup=return_to_menu_keyboard())
    await state.set_state(ReplenishState.AMOUNT)
    
    
@router.message(ReplenishState.AMOUNT)
async def amount_handler(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    else:
        amount = int(message.text)
        if amount < 1:
            await message.answer("–ú–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å.")
        else:
            await message.answer(
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} —Ä—É–±.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=replenish_keyboard())
            await state.set_data({"amount": amount})
            await state.set_state(ReplenishState.PAYMENT_METHOD)
        
        
@router.callback_query(Text(text="qiwi"), ReplenishState.PAYMENT_METHOD)
async def replenish_p2p_handler(call: CallbackQuery, state: FSMContext, user, bot: Bot):
    rep = await Replenishment.get_or_none(user_id=call.from_user.id, status=0)
    if not rep:
        state_data = await state.get_data()
        amount = state_data["amount"]
        await call.message.delete()
        await call.message.answer(f"–ö –æ–ø–ª–∞—Ç–µ {amount} —Ä—É–±.\n" + QIWI)
        await call.message.answer("–û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.–û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.\n–¢–∞–∫–∂–µ –±—É–¥—É —Ä–∞–¥ —á–∞–µ–≤—ã–º üí´.")
        await state.set_data({"amount": amount, "method": "Qiwi"})
        await state.set_state(ReplenishState.CHECK)
    else:
        await call.message.delete()
        await call.message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ.")
        await menu_handler(call.message, state)
    
    
@router.message(Text(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"), ReplenishState.CHECK_BILL)
async def check_bill_handler(message: Message, state: FSMContext, user, bot: Bot):
    state_data = await state.get_data()
    amount = state_data["amount"]
    bill = is_bill_paid(state_data["bill"]["billId"])
    if bill:
        user.rubles += amount
        await user.save()
        await Replenishment.create(user_id=message.from_user.id, amount=float(amount), bill_id=state_data["bill"]["billId"], status=1)
        logger.info(f"{message.from_user.first_name} {message.from_user.last_name} –ø–æ–ø–æ–ª–Ω–∏–ª/–∞ –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} —Ä—É–±. (@{message.from_user.username} | {message.from_user.id})")
        await message.answer("–°—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω, –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        await send_message_to_admins(bot, status=1, text=f"@{user.nickname} ({user.user_id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} —Ä—É–±.")
        await menu_handler(message, state)
    else:
        await message.answer("–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É.")
        

@router.callback_query(Text(text="alerts"), ReplenishState.PAYMENT_METHOD)
async def alerts_handler(call: CallbackQuery, state: FSMContext):
    rep = await Replenishment.get_or_none(user_id=call.from_user.id, status=0)
    if not rep:
        state_data = await state.get_data()
        amount = state_data["amount"]
        await call.message.delete()
        await call.message.answer(f"–ö –æ–ø–ª–∞—Ç–µ {amount + amount * 0.02} —Ä—É–±.\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://www.donationalerts.com/r/bestmarket")
        await call.message.answer("–û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.\n–¢–∞–∫–∂–µ –±—É–¥—É —Ä–∞–¥ —á–∞–µ–≤—ã–º üí´")
        await state.set_data({"amount": amount, "method": "DonationAlerts"})
        await state.set_state(ReplenishState.CHECK)
    else:
        await call.message.delete()
        await call.message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ.")
        await menu_handler(call.message, state)


@router.callback_query(Text(text="sber"), ReplenishState.PAYMENT_METHOD)
async def other_methods_handler(call: CallbackQuery, state: FSMContext):
    rep = await Replenishment.get_or_none(user_id=call.from_user.id, status=0)
    if not rep:
        state_data = await state.get_data()
        amount = state_data["amount"]
        await call.message.delete()
        await call.message.answer(f"–ö –æ–ø–ª–∞—Ç–µ {amount} —Ä—É–±.\n" + SBER)
        await call.message.answer("–û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.\n–¢–∞–∫–∂–µ –±—É–¥—É —Ä–∞–¥ —á–∞–µ–≤—ã–º üí´")
        await state.set_data({"amount": amount, "method": "–°–ø–µ—Ä–º–∞–±–∞–Ω–∫"})
        await state.set_state(ReplenishState.CHECK)
    else:
        await call.message.delete()
        await call.message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ.")
        await menu_handler(call.message, state)
    
    
@router.message(ReplenishState.CHECK, content_types="photo")
async def check_handler(message: Message, state: FSMContext, bot: Bot, user):
    state_data = await state.get_data()
    file = await bot.get_file(message.photo[-1].file_id)
    file_name, file_extension = os.path.splitext(file.file_path)
    check_name = f"{message.from_user.id}_{message.photo[-1].file_id}" + file_extension
    await bot.download_file(file.file_path, "files/check/" + check_name)
    replenish = await Replenishment.create(user_id=message.from_user.id, amount=state_data["amount"], file_name=check_name)
    await send_message_to_admins(bot, text=(
        f"ID: {replenish.id}\n"
        f"Chat ID: {replenish.user_id}\n"
        f"Replenishment amount: {state_data['amount']}\n"
        f"Method: {state_data['method']}\n"
        f"Nickname: @{user.nickname}"),
        photo=f"files/check/{check_name}",
        reply_markup=admin_replenish_keyboard())
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, –æ–∂–∏–¥–∞–π—Ç–µ! –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞.")
    await menu_handler(message, state)
    
    
@router.callback_query(Text(text="confirm_replenish"), IsAdmin(status=2, answer="–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏ –º–∞–ª."))
async def confirm_replenish_handler(call: CallbackQuery, bot: Bot, user: User):
    replenish_id = int(re.findall("[0-9]+", call.message.caption)[0])
    replenish = await Replenishment.get_or_none(id=replenish_id)
    if replenish.status == 1:
        await call.message.edit_reply_markup(reply_markup=happy())
        await call.message.reply(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º ({replenish.admin_id}).")
    elif replenish.status == 2:
        await call.message.edit_reply_markup(reply_markup=not_happy())
        await call.message.reply(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º ({replenish.admin_id}).")
    else:
        replenish_user = await User.get_or_none(user_id=replenish.user_id)
        replenish_user.rubles += replenish.amount
        await replenish_user.save()
        replenish.status = 1
        replenish.admin_id = call.from_user.id
        await replenish.save()
        await call.message.edit_reply_markup(reply_markup=happy())
        await call.message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        await bot.send_message(chat_id=replenish_user.user_id, text=f"–í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n+{replenish.amount} —Ä—É–±")
        
        
@router.callback_query(Text(text="cancel_replenish"), IsAdmin(status=2, answer="–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏ –º–∞–ª."))
async def cancel_replenish_handler(call: CallbackQuery, state: FSMContext):
    replenish_id = int(re.findall("[0-9]+", call.message.caption)[0])
    replenish = await Replenishment.get_or_none(id=replenish_id)
    if replenish.status == 1:
        await call.message.edit_reply_markup(reply_markup=happy())
        await call.message.reply(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º ({replenish.admin_id}).")
    elif replenish.status == 2:
        await call.message.edit_reply_markup(reply_markup=not_happy())
        await call.message.reply(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º ({replenish.admin_id}).")
    else:
        await call.message.edit_reply_markup(reply_markup=not_happy())
        await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã")
        await state.set_data({"replenish_id": replenish_id})
        await state.set_state(ReplenishState.CANCEL)
        
        
@router.message(ReplenishState.CANCEL)
async def cause_cancel_handler(message: Message, state: FSMContext, user: User, bot: Bot):
    state_data = await state.get_data()
    replenish = await Replenishment.get_or_none(id=state_data["replenish_id"])
    if replenish.status == 1:
        await message.answer(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏ # {state_data['replenish_id']} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º ({replenish.admin_id}). –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É")
    elif replenish.status == 2:
        await message.answer(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏ # {state_data['replenish_id']} —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º ({replenish.admin_id}). –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É")
    else:
        replenish.status = 2
        replenish.admin_id = message.from_user.id
        replenish.cause = message.text
        await replenish.save()
        await bot.send_message(chat_id=replenish.user_id, text=f"–í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n –ü—Ä–∏—á–∏–Ω–∞: {message.text}")
        await message.answer(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}")
        
        
@router.callback_query(Text(text="check_replenish"), IsAdmin(status=1))
async def check_replenish_handler(call: CallbackQuery):
    replenish_id = int(re.findall("[0-9]+", call.message.caption)[0])
    replenish = await Replenishment.get_or_none(id=replenish_id)
    if replenish.status == 1:
        await call.message.edit_reply_markup(reply_markup=happy())
        await call.message.reply(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {replenish.admin_id}.")
    elif replenish.status == 2:
        await call.message.edit_reply_markup(reply_markup=not_happy())
        await call.message.reply(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {replenish.admin_id}.")
    else:
        await call.message.reply("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")