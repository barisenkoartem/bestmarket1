from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.fsm.context import FSMContext

from keyboards import products_keyboard, ProductAction, product_keyboard, delete_product_keyboard
from models import Product, User
from tools.send import send_message_to_admins

router = Router()


@router.message(Text(text="–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã üì¶"))
async def products_handler(message: Message):
    key = await products_keyboard()
    if key:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=key)
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        
        
@router.callback_query(ProductAction.filter(F.action=="product"))
async def product_handler(call: CallbackQuery, callback_data: ProductAction, user: User):
    product = await Product.get_or_none(id=callback_data.id)
    if not product:
        await call.answer("–¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
        await call.message.delete()
        await products_handler(call.message)
    else:
        price_type = "—Ä—É–±." if product.price_type == 1 else "–∑–æ–ª–æ—Ç–∞"
        key = delete_product_keyboard(callback_data.id) if user.status >= 2 else product_keyboard(callback_data.id)
        await call.message.delete()
        await call.message.answer_photo(photo=FSInputFile(product.path()), caption=(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
            f"–¶–µ–Ω–∞: {product.price} {price_type}"), reply_markup=key)
            
            
@router.callback_query(ProductAction.filter(F.action=="buy_product"))
async def buy_product_handler(call: CallbackQuery, callback_data: ProductAction, user: User, bot: Bot):
    product = await Product.get_or_none(id=callback_data.id)
    if not product:
        await call.answer("–¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
        await producta_handler(call.message)
    else:
        if product.price_type == 1:
            price_type = "—Ä—É–±."
            if product.price > user.rubles:
                await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            else:
                user.rubles -= product.price
                await user.save()
        elif product.price_type == 2:
            price_type = "–∑–æ–ª–æ—Ç–∞"
            if product.price > user.gold:
                await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞")
                return
            else:
                user.gold -= product.price
                await user.save()
        await product.delete()
        await call.message.delete()
        await call.message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        await send_message_to_admins(bot, status=2, text=(f"–ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{user.nickname}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º.\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
        f"–¶–µ–Ω–∞: {product.price} {price_type}"), photo=product.path())
            
            
@router.callback_query(ProductAction.filter(F.action=="delete_product"))
async def delete_product_handler(call: CallbackQuery, callback_data: ProductAction):
    product = await Product.get_or_none(id=callback_data.id)
    if not product:
        await call.answer("–¢–æ–≤–∞—Ä —É–∂–µ –∫—É–ø–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
        await call.message.delete()
    else:
        await product.delete()
        await call.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        await call.message.delete()
    await products_handler(call.message)
            
            
@router.callback_query(Text(text="back_products"))
async def back_products_handler(call: CallbackQuery):
    await call.message.delete()
    await products_handler(call.message)